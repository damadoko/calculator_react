{"version":3,"sources":["components/OutputScreen/OutputScreen.module.css","container/App.module.css","components/Title/Title.module.css","components/Buttons/Buttons.module.css","components/Buttons/Button/Button.module.css","components/FunctionButton/FunctionButton.module.css","components/Title/Title.js","components/OutputScreen/OutputScreen.js","components/Buttons/Button/Button.js","components/Buttons/Buttons.js","components/FunctionButton/FunctionButton.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","classes","OutputScreen","props","Span","output","Button","input","multi","onClick","Buttons","buttonList","ButtonsList","map","btn","index","key","FunctionButton","clearAll","deleteChar","style","textAlign","border","App","getNewNum","num","preState","state","currentNum","isNaN","lastInput","previousNum","screenOutput","numString","checkDot","toString","split","filter","item","length","setState","multiplyingHandler","isMutiplying","showResult","multipler","clearAllHandler","deleteCharHandler","slice","join","result","Number","console","log","btnList","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b06129f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"OutputScreen\":\"OutputScreen_OutputScreen__owxut\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3F5ee\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Title_Title__3cQPx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Buttons\":\"Buttons_Buttons__2ykWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__Hk9QN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FunctionButton\":\"FunctionButton_FunctionButton__11XBV\"};","import React from \"react\";\nimport classes from \"./Title.module.css\";\n\nconst Title = () => <div className={classes.Title}>Calculator</div>;\n\nexport default Title;\n","import React from \"react\";\nimport classes from \"./OutputScreen.module.css\";\n\nconst OutputScreen = (props) => (\n  <div className={classes.OutputScreen}>\n    <span className={classes.Span}>{props.output}</span>\n  </div>\n);\n\nexport default OutputScreen;\n","import React from \"react\";\nimport classes from \"./Button.module.css\";\n\nconst Button = (props) => {\n  const { input, multi } = props;\n\n  // const onClickHandler = (input) => {\n  //   switch (input) {\n  //     case \"*\":\n  //       return multipler();\n  //     case \"/\":\n  //       return devition();\n  //     case \"+\":\n  //       return addition();\n  //     case \"-\":\n  //       return deduction();\n  //     case \"=\":\n  //       return showRes();\n  //     default:\n  //       // console.log(\"clicked\");\n  //       return newNum(input);\n  //   }\n  // };\n\n  return (\n    <div className={classes.Button} onClick={() => multi(input)}>\n      {input}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport classes from \"./Buttons.module.css\";\n\nimport Button from \"./Button/Button\";\n\nconst Buttons = (props) => {\n  const { buttonList, multi } = props;\n  const ButtonsList = buttonList.map((btn, index) => (\n    <Button key={index} input={btn} multi={multi} />\n  ));\n  return <div className={classes.Buttons}>{ButtonsList}</div>;\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport classes from \"./FunctionButton.module.css\";\n\nconst FunctionButton = (props) => {\n  const { clearAll, deleteChar } = props;\n  const style = {\n    textAlign: \"center\",\n    border: \"1px solid black\",\n  };\n\n  return (\n    <div className={classes.FunctionButton}>\n      <div style={style} onClick={clearAll}>\n        Clear\n      </div>\n      <div style={style} onClick={deleteChar}>\n        Delete\n      </div>\n    </div>\n  );\n};\n\nexport default FunctionButton;\n","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\n\nimport Title from \"../components/Title/Title\";\nimport OutputScreen from \"../components/OutputScreen/OutputScreen\";\nimport Buttons from \"../components/Buttons/Buttons\";\nimport FunctionButton from \"../components/FunctionButton/FunctionButton\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      btnList: [7, 8, 9, \"/\", 4, 5, 6, \"*\", 1, 2, 3, \"+\", 0, \".\", \"=\", \"-\"],\n      screenOutput: 0,\n      multipler: null,\n      previousNum: null,\n      currentNum: null,\n      isMutiplying: false,\n      lastInput: null,\n    };\n  }\n\n  getNewNum = (num) => {\n    const preState = { ...this.state };\n\n    if (\n      preState.currentNum &&\n      (!isNaN(preState.lastInput) || preState.lastInput === \".\")\n    ) {\n      const checkDot =\n        preState.currentNum\n          .toString()\n          .split(\"\")\n          .filter((item) => item === \".\").length !== 1;\n\n      if ((num === \".\" && checkDot) || num !== \".\") {\n        const numString = `${preState.currentNum}${num}`;\n        preState.currentNum = numString;\n        preState.screenOutput = preState.currentNum;\n        preState.lastInput = num;\n      }\n    } else if (\n      num === \".\" &&\n      (!preState.currentNum || isNaN(preState.lastInput))\n    ) {\n      const numString = `0${num}`;\n      preState.previousNum = preState.currentNum;\n      preState.currentNum = numString;\n      preState.screenOutput = preState.currentNum;\n      preState.lastInput = num;\n    } else {\n      preState.previousNum = preState.currentNum;\n      preState.currentNum = `${num}`;\n      preState.screenOutput = preState.currentNum;\n      preState.lastInput = num;\n    }\n\n    this.setState(preState);\n  };\n\n  multiplyingHandler = (input) => {\n    if (\n      this.state.isMutiplying &&\n      isNaN(input) &&\n      input !== \".\" &&\n      !isNaN(this.state.lastInput)\n    ) {\n      this.showResult();\n    }\n\n    switch (input) { \n      case \"+\":\n        this.setState({ multipler: \"+\", isMutiplying: true, lastInput: \"+\" });\n        break;\n      case \"-\":\n        this.setState({ multipler: \"-\", isMutiplying: true, lastInput: \"-\" });\n        break;\n      case \"*\":\n        this.setState({ multipler: \"*\", isMutiplying: true, lastInput: \"*\" });\n        break;\n      case \"/\":\n        this.setState({ multipler: \"/\", isMutiplying: true, lastInput: \"/\" });\n        break;\n      case \"=\":\n        this.showResult();\n        this.setState({ lastInput: \"=\" });\n        break;\n      default:\n        // console.log(\"clicked\");\n        this.getNewNum(input);\n    }\n  };\n\n  // additionHandler = () => {\n  //   if (this.state.isMutiplying) {\n  //     this.showResult();\n  //   } else {\n  //     this.setState({ multipler: \"+\", isMutiplying: true });\n  //   }\n  // };\n  // deductionHandler = () => {\n  //   if (this.state.isMutiplying) {\n  //     this.showResult();\n  //   } else {\n  //     this.setState({ multipler: \"-\", isMutiplying: true });\n  //   }\n  // };\n  // multiHandler = () => {\n  //   this.setState({ multipler: \"*\", isMutiplying: true });\n  // };\n  // devideHandler = () => {\n  //   if (this.state.currentNum !== 0) {\n  //     this.setState({ multipler: \"/\", isMutiplying: true });\n  //   }\n  // };\n\n  clearAllHandler = () => {\n    // console.log(\"Clicked\");\n    this.setState({\n      screenOutput: 0,\n      multipler: null,\n      previousNum: null,\n      currentNum: null,\n      lastInput: null,\n      isMutiplying: false,\n    });\n  };\n\n  deleteCharHandler = () => {\n    const preState = { ...this.state };\n    if (preState.currentNum) {\n      if (preState.currentNum.length > 1) {\n        preState.currentNum = preState.currentNum\n          .split(\"\")\n          .slice(0, -1)\n          .join(\"\");\n        preState.screenOutput = preState.currentNum;\n      } else if (preState.currentNum.length === 1) {\n        preState.currentNum = null;\n        preState.screenOutput = 0;\n      }\n    }\n    this.setState(preState);\n  };\n\n  showResult = () => {\n    const { previousNum, currentNum } = this.state;\n    let result;\n    switch (this.state.multipler) {\n      case \"*\":\n        result = Number(previousNum) * Number(currentNum);\n        this.setState({\n          screenOutput: result,\n          currentNum: result,\n          multipler: null,\n          isMutiplying: false,\n        });\n        break;\n      case \"/\":\n        result = Number(previousNum) / Number(currentNum);\n        this.setState({\n          screenOutput: result,\n          currentNum: result,\n          multipler: null,\n          isMutiplying: false,\n        });\n        break;\n      case \"+\":\n        result = Number(previousNum) + Number(currentNum);\n        this.setState({\n          screenOutput: result,\n          currentNum: result,\n          multipler: null,\n          isMutiplying: false,\n        });\n        break;\n      case \"-\":\n        result = Number(previousNum) - Number(currentNum);\n        this.setState({\n          screenOutput: result,\n          currentNum: result,\n          multipler: null,\n          isMutiplying: false,\n        });\n        break;\n      default:\n        console.log(\"No multiply\");\n    }\n  };\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <Title />\n        <OutputScreen output={this.state.screenOutput} />\n        <FunctionButton\n          clearAll={this.clearAllHandler}\n          deleteChar={this.deleteCharHandler}\n        />\n        <Buttons\n          buttonList={this.state.btnList}\n          multi={this.multiplyingHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}